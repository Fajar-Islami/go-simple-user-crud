// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: users.sql

package simpleusercrud

import (
	"context"
	"database/sql"
)

const createAuthor = `-- name: CreateAuthor :execlastid
INSERT INTO users (
  id,email,first_name,last_name,avatar
) VALUES ( ?,?,?,?,? )
`

type CreateAuthorParams struct {
	ID        int64          `json:"id"`
	Email     string         `json:"email"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Avatar    sql.NullString `json:"avatar"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (int64, error) {
	result, err := q.exec(ctx, q.createAuthorStmt, createAuthor,
		arg.ID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Avatar,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const getCountManyUser = `-- name: GetCountManyUser :many
SELECT count(*) FROM users
WHERE email = ?
`

func (q *Queries) GetCountManyUser(ctx context.Context, email string) ([]int64, error) {
	rows, err := q.query(ctx, q.getCountManyUserStmt, getCountManyUser, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getManyUser = `-- name: GetManyUser :many
SELECT id,email,first_name,last_name,avatar,created_at,updated_at,deleted_at FROM users
WHERE email like ? or first_name like ? or last_name like ?
ORDER BY id
LIMIT ?
OFFSET ?
`

type GetManyUserParams struct {
	Email     string `json:"email"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) GetManyUser(ctx context.Context, arg GetManyUserParams) ([]User, error) {
	rows, err := q.query(ctx, q.getManyUserStmt, getManyUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Avatar,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id,email,first_name,last_name,avatar,created_at,updated_at,deleted_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Avatar,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteUser = `-- name: SoftDeleteUser :exec
UPDATE users 
SET deleted_at = now()
WHERE id = ?
`

func (q *Queries) SoftDeleteUser(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.softDeleteUserStmt, softDeleteUser, id)
	return err
}

const updatePartialUsers = `-- name: UpdatePartialUsers :execlastid
UPDATE users 
SET 
    first_name = IF(@update_first_name = true, @first_name, first_name),
    last_name = IF(@update_last_name = true, @last_name, last_name),
    avatar = IF(@update_avatar = true, @avatar, avatar),
    updated_at = now()
WHERE id = @id
`

func (q *Queries) UpdatePartialUsers(ctx context.Context) (int64, error) {
	result, err := q.exec(ctx, q.updatePartialUsersStmt, updatePartialUsers)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}
